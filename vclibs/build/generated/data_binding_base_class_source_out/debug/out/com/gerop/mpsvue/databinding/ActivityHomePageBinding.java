// Generated by view binder compiler. Do not edit!
package com.gerop.mpsvue.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.gerop.mpsvue.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHomePageBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LottieAnimationView animationView;

  @NonNull
  public final ImageView backs;

  @NonNull
  public final LinearLayout banr;

  @NonNull
  public final RelativeLayout btnClick;

  @NonNull
  public final RelativeLayout btnClick2;

  @NonNull
  public final LinearLayout callTimerLayout;

  @NonNull
  public final ImageView image;

  @NonNull
  public final ImageView image2;

  @NonNull
  public final LinearLayout lnrsbg;

  @NonNull
  public final TextView privacypolicy;

  @NonNull
  public final TextView server1;

  @NonNull
  public final TextView server2;

  @NonNull
  public final LinearLayout termcondition;

  @NonNull
  public final TextView timer;

  @NonNull
  public final TextView txtConnect;

  private ActivityHomePageBinding(@NonNull RelativeLayout rootView,
      @NonNull LottieAnimationView animationView, @NonNull ImageView backs,
      @NonNull LinearLayout banr, @NonNull RelativeLayout btnClick,
      @NonNull RelativeLayout btnClick2, @NonNull LinearLayout callTimerLayout,
      @NonNull ImageView image, @NonNull ImageView image2, @NonNull LinearLayout lnrsbg,
      @NonNull TextView privacypolicy, @NonNull TextView server1, @NonNull TextView server2,
      @NonNull LinearLayout termcondition, @NonNull TextView timer, @NonNull TextView txtConnect) {
    this.rootView = rootView;
    this.animationView = animationView;
    this.backs = backs;
    this.banr = banr;
    this.btnClick = btnClick;
    this.btnClick2 = btnClick2;
    this.callTimerLayout = callTimerLayout;
    this.image = image;
    this.image2 = image2;
    this.lnrsbg = lnrsbg;
    this.privacypolicy = privacypolicy;
    this.server1 = server1;
    this.server2 = server2;
    this.termcondition = termcondition;
    this.timer = timer;
    this.txtConnect = txtConnect;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHomePageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHomePageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_home_page, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHomePageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animationView;
      LottieAnimationView animationView = ViewBindings.findChildViewById(rootView, id);
      if (animationView == null) {
        break missingId;
      }

      id = R.id.backs;
      ImageView backs = ViewBindings.findChildViewById(rootView, id);
      if (backs == null) {
        break missingId;
      }

      id = R.id.banr;
      LinearLayout banr = ViewBindings.findChildViewById(rootView, id);
      if (banr == null) {
        break missingId;
      }

      id = R.id.btn_click;
      RelativeLayout btnClick = ViewBindings.findChildViewById(rootView, id);
      if (btnClick == null) {
        break missingId;
      }

      id = R.id.btn_click2;
      RelativeLayout btnClick2 = ViewBindings.findChildViewById(rootView, id);
      if (btnClick2 == null) {
        break missingId;
      }

      id = R.id.call_timer_layout;
      LinearLayout callTimerLayout = ViewBindings.findChildViewById(rootView, id);
      if (callTimerLayout == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.image2;
      ImageView image2 = ViewBindings.findChildViewById(rootView, id);
      if (image2 == null) {
        break missingId;
      }

      id = R.id.lnrsbg;
      LinearLayout lnrsbg = ViewBindings.findChildViewById(rootView, id);
      if (lnrsbg == null) {
        break missingId;
      }

      id = R.id.privacypolicy;
      TextView privacypolicy = ViewBindings.findChildViewById(rootView, id);
      if (privacypolicy == null) {
        break missingId;
      }

      id = R.id.server1;
      TextView server1 = ViewBindings.findChildViewById(rootView, id);
      if (server1 == null) {
        break missingId;
      }

      id = R.id.server2;
      TextView server2 = ViewBindings.findChildViewById(rootView, id);
      if (server2 == null) {
        break missingId;
      }

      id = R.id.termcondition;
      LinearLayout termcondition = ViewBindings.findChildViewById(rootView, id);
      if (termcondition == null) {
        break missingId;
      }

      id = R.id.timer;
      TextView timer = ViewBindings.findChildViewById(rootView, id);
      if (timer == null) {
        break missingId;
      }

      id = R.id.txtConnect;
      TextView txtConnect = ViewBindings.findChildViewById(rootView, id);
      if (txtConnect == null) {
        break missingId;
      }

      return new ActivityHomePageBinding((RelativeLayout) rootView, animationView, backs, banr,
          btnClick, btnClick2, callTimerLayout, image, image2, lnrsbg, privacypolicy, server1,
          server2, termcondition, timer, txtConnect);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
